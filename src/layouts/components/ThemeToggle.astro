---
const { class: className } = Astro.props;
// get theme from cookie
let theme = "light";
if (Astro.cookies.has("theme")) {
  theme = Astro.cookies.get("theme")?.value ?? theme;
}
---

<script>
  import { getColorTheme, setColorTheme } from "@/lib/color-theme";

  class ThemeToggle extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector("button");
      const icon = this.querySelector("i");
      const text = this.querySelector("span");

      // Apply theme on page load
      const initialTheme = getColorTheme();
      document.documentElement.classList.remove("dark", "light");
      document.documentElement.classList.add(initialTheme);

      // Update icon and text to match initial state
      this.updateUI(initialTheme);

      button?.addEventListener("click", () => {
        // Get current theme and toggle it
        const currentTheme = getColorTheme();
        const newTheme = currentTheme === "light" ? "dark" : "light";

        // Save new theme
        setColorTheme(newTheme);

        // Update the UI
        this.updateUI(newTheme);
      });
    }

    // Update icon and text based on theme
    updateUI(theme) {
      const icon = this.querySelector("i");
      const text = this.querySelector("span");

      if (icon) {
        icon.className = "ti";
        icon.classList.add(theme === "light" ? "ti-sunset" : "ti-sunrise");
      }

      if (text) {
        text.textContent = theme === "light" ? "Dark" : "Light";
      }
    }
  }

  customElements.define("theme-toggle", ThemeToggle);
</script>
<theme-toggle>
  <button
    class={`${className} !no-underline group flex flex-row items-center gap-1`}
  >
    <i class={`ti  ${theme === "light" ? "ti-sunset" : "ti-sunrise"}`}></i>
    <span class="group-hover:underline"
      >{theme === "light" ? "Dark" : "Light"}</span
    >
  </button>
</theme-toggle>
