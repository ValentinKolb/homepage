---
import Base from "@/components/astro/Base.astro";
import { getContentPages } from "@/lib/content/contentParser.astro";
import { Image } from "astro:assets";
import ReciYML from "@/components/solidjs/ReciYML";
import { dateFormat } from "@/lib/utils/dates";
import { markdownToHtml } from "@/lib/utils/markdown";
import { humanize, slugify } from "@/lib/utils/text";
import config from "@/config/config";
import calculateReadingTime from "reading-time";

export const prerender = true;

export async function getStaticPaths() {
  const blogs = await getContentPages("blogs");

  return blogs.map((blog: any) => ({
    params: {
      slug: blog.slug,
    },
    props: { blog },
  }));
}

const { blog } = Astro.props;
const { Content } = await blog.render();
const { title, meta_title, description, image, date, tags, recipe } = blog.data;

const readingTime = Math.round(calculateReadingTime(blog.body).minutes);
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <acticle class="article flex flex-col gap-6">
    {/* title */}
    <h1
      class="m-0 font-bold text-center text-3xl transition-[font-size] duration-500 ease-in-out lg:text-5xl"
      set:html={markdownToHtml(title)}
    />

    <section
      class="flex flex-row gap-4 justify-center items-center flex-wrap text-sm"
    >
      <span class="flex flex-row gap-2 items-center">
        <i class="ti ti-calendar-month h-4 w-4 shrink-0"></i>
        <span>{dateFormat(date)}</span>
      </span>

      <span class="text-sm">&#x2022</span>

      <span>{readingTime} min Lesezeit</span>
    </section>

    {/* image */}
    {
      image && (
        <Image
          class={"m-0 w-screen h-auto"}
          width={1000}
          height={300}
          src={image}
          alt={title}
        />
      )
    }

    {/* recipe */}
    {recipe && <ReciYML recipe={recipe} client:load />}

    {/* blog content */}
    <section class="prose dark:prose-invert text-left max-w-none m-0">
      <Content />
    </section>

    {/* footer actions (tags, share, ...) */}
    <section class="flex flex-row gap-4 justify-center items-center flex-wrap">
      {
        tags.map((tag: string) => (
          <a
            href={`/blog/t/${slugify(tag)}`}
            class="font-medium text-sm hover-text"
          >
            #{humanize(tag)}
          </a>
        ))
      }

      <span class="text-sm">&#x2022</span>

      {/* share on mastodon button */}
      <a
        aria-label="mastodon share button"
        href={`https://mastodon.social/share?text=${encodeURIComponent(
          `${config.BASE_URL}/blog/${blog.slug}`,
        )}`}
        target="_blank"
        rel="noreferrer noopener"
      >
        <i class="ti ti-brand-mastodon cursor-pointer hover-text"></i>
      </a>
    </section>
  </acticle>
</Base>
