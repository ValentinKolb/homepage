---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import Base from "@/components/layout/Base.astro";
import { slugify } from "@/lib/utils/textConverter";
import fs from "node:fs/promises";
import { shuffleArray } from "@/lib/content/shuffle.astro";
import path from "node:path";

export const prerender = true;

// Get gallery collections from markdown files
const galleries = await getCollection("gallery");

// Sort galleries by date (if available) or name
const sortedGalleries = [...galleries].sort((a, b) => {
  // If both have dates, sort by date (newest first)
  if (a.data.date && b.data.date) {
    return b.data.date.localeCompare(a.data.date); // Reverse order for newest first
  }
  // If only one has a date, prioritize the one with a date
  if (a.data.date && !b.data.date) return -1;
  if (!a.data.date && b.data.date) return 1;

  // If neither has a date, sort by name
  return a.data.name.localeCompare(b.data.name);
});

// Separate regular and topic galleries from the sorted list
const regularGalleries = sortedGalleries.filter(
  (gallery) => !gallery.data.topicGallery,
);
const topicGalleries = sortedGalleries.filter(
  (gallery) => gallery.data.topicGallery,
);

// Function to get the first image from each gallery folder
async function getPreviewImages() {
  // Define explicit type with index signature
  const previewImages: Record<string, string> = {};

  for (const gallery of galleries) {
    const publicPath = gallery.data.folderPath;
    const systemPath = path.join(
      process.cwd(),
      "public",
      gallery.data.folderPath.replace(/^\//, ""),
    );

    try {
      const files = await fs.readdir(systemPath);
      const imageFiles = files.filter((file) => file.endsWith(".jpg"));

      if (imageFiles.length > 0) {
        // Get a random image instead of always the first one
        const randomIndex = Math.floor(Math.random() * imageFiles.length);
        previewImages[gallery.id] = `${publicPath}/${imageFiles[randomIndex]}`;
      }
    } catch (error) {
      console.error(`Error reading gallery folder ${systemPath}:`, error);
    }
  }

  return previewImages;
}

const galleryPreviews = await getPreviewImages();
---

<Base title="Galerie">
  <section class="py-16">
    <div class="container mx-auto">
      <h1 class="text-3xl font-bold mb-8">Galerie</h1>

      <!-- Regular Galleries -->
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8 mb-16">
        {
          regularGalleries.map((gallery) => (
            <a
              href={`/gallery/${slugify(gallery.data.name)}`}
              class="group block"
            >
              <div class="aspect-square overflow-hidden rounded-lg bg-gray-200">
                <Image
                  src={galleryPreviews[gallery.id]}
                  width={400}
                  height={400}
                  alt={gallery.data.name}
                  class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-[1.02]"
                />
              </div>
              <h2 class="group-hover:text-primary mt-4 text-xl font-semibold transition-colors">
                {gallery.data.name}
              </h2>
              {gallery.data.date && (
                <span class="text-sm text-gray-500">{gallery.data.date}</span>
              )}
              {gallery.data.description && (
                <p class="text-gray-600">{gallery.data.description}</p>
              )}
            </a>
          ))
        }
      </div>

      <!-- Topic Galleries (if any exist) -->
      {
        topicGalleries.length > 0 && (
          <>
            <h2 class="text-2xl font-bold mb-8">Themen-Galerien</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8">
              {topicGalleries.map((gallery) => (
                <a
                  href={`/gallery/${slugify(gallery.data.name)}`}
                  class="group block"
                >
                  <div class="aspect-square overflow-hidden rounded-lg bg-gray-200">
                    <Image
                      src={galleryPreviews[gallery.id]}
                      width={400}
                      height={400}
                      alt={gallery.data.name}
                      class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-[1.02]"
                    />
                  </div>
                  <h2 class="group-hover:text-primary mt-4 text-xl font-semibold transition-colors">
                    {gallery.data.name}
                  </h2>
                  {gallery.data.date && (
                    <span class="text-sm text-gray-500">
                      {gallery.data.date}
                    </span>
                  )}
                  {gallery.data.description && (
                    <p class="text-gray-600">{gallery.data.description}</p>
                  )}
                </a>
              ))}
            </div>
          </>
        )
      }
    </div>
  </section>
</Base>
