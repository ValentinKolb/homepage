---
import Base from "@/components/layout/Base.astro";
import { Image } from "astro:assets";

const content = Array.from({ length: 100_000 }, () =>
  Math.random() < 0.5 ? "1" : "0",
).join(" ");
---

<Base>
  <!-- Matrix Background -->
  <div
    id="matrix-bg"
    class={`fixed inset-0 -z-10`}
    style={`--matrix-content: "${content}"`}
    aria-hidden="true"
  >
  </div>

  <!-- Hero section with split layout -->
  <section class="min-h-[80vh] flex items-center">
    <div class="container mx-auto">
      <div class="grid md:grid-cols-2 gap-12 items-center">
        <!-- Left column: Text -->
        <div class="space-y-6 fade-in-left">
          <h1 class="text-4xl md:text-5xl font-bold leading-tight">
            Wilkommen <span
              class="inline-block text-4xl transition-transform ease-in-out duration-300 hover:rotate-12 hover:scale-[120%]"
              >ðŸ‘‹</span
            >
          </h1>
          <p class="text-lg text-gray-600 leading-relaxed max-w-prose">
            Als Informatiker teile ich hier meine Leidenschaft fÃ¼r Code,
            Fotografie und das perfekte Brot. Entdecke meine Gedanken und
            Projekte.
          </p>
          <div class="flex gap-4 pt-4">
            <a href="/projects" class="btn-simple"> Meine Projekte </a>
            <a href="/blog" class="btn-simple"> Blog entdecken </a>
          </div>
        </div>

        <!-- Right column: Image -->
        <div class="relative fade-in-right">
          <div
            class="aspect-square rounded-md overflow-hidden shadow-2xl transform transition-transform duration-500"
          >
            <Image
              src="/images/authors/valentin-kolb.jpg"
              alt="Valentin Kolb"
              width={600}
              height={600}
              class="w-full h-full object-cover"
            />
          </div>
        </div>
      </div>
    </div>
  </section>
</Base>

<style>
  /* Fade-in animations */
  .fade-in-left {
    opacity: 0;
    transform: translateX(-20px);
    animation: fadeInLeft 1s ease forwards;
  }

  .fade-in-right {
    opacity: 0;
    transform: translateX(20px);
    animation: fadeInRight 1s ease forwards;
  }

  .fade-in-up {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 1s ease forwards;
  }

  @keyframes fadeInLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeInRight {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Matrix Background */
  #matrix-bg {
    font-family: "Courier New", monospace;
    font-size: 14px;
    line-height: 20px;
    letter-spacing: 2px;
    color: #333;
    content-visibility: auto;
  }

  /* Disable matrix effect for reduced motion preference */
  @media (prefers-reduced-motion: reduce) {
    #matrix-bg::before {
      display: none;
    }
  }

  @media (prefers-color-scheme: dark) {
    #matrix-bg {
      color: #ccc;
    }
  }

  #matrix-bg::before {
    content: var(--matrix-content);
    position: absolute;
    inset: 0;
    padding: 20px;
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    color: inherit;
    word-wrap: break-word;
    white-space: pre-wrap;
    mask: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      black 10px,
      transparent 100px
    );
    opacity: var(--matrix-opacity, 1);
    transition: opacity 0.1s ease-in;
  }
</style>

<script>
  // Skip matrix effect for  reduced motion
  const prefersReducedMotion = window.matchMedia(
    "(prefers-reduced-motion: reduce)",
  ).matches;

  if (!prefersReducedMotion) {
    const matrixBg = document.getElementById("matrix-bg") as HTMLElement;

    document.addEventListener("mousemove", (e) => {
      const mouseX = (e.clientX / window.innerWidth) * 100;
      const mouseY = (e.clientY / window.innerHeight) * 100;
      matrixBg.style.setProperty("--mouse-x", mouseX + "%");
      matrixBg.style.setProperty("--mouse-y", mouseY + "%");
      matrixBg.style.setProperty("--matrix-opacity", "1");
    });

    document.documentElement.addEventListener("mouseleave", () => {
      matrixBg.style.setProperty("--matrix-opacity", "0");
    });
  }
</script>
